plugins {
    id 'idea'
    id 'eclipse'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.github.jk1.dependency-license-report' version '1.16'
    id 'distribution'
}

// NOTE: version is specified in gradle.properties
// NOTE: All dependencies should be specified in dependencies.toml

defaultTasks ':distZip'

// A resolvable configuration to collect test reports data from subprojects
configurations {
    testReportData {
        canBeResolved = true
        canBeConsumed = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'test-report-data'))
        }
    }
}

// depend on testReportData from all subprojects
dependencies {
    testReportData project(':ecs-sync-cli')
    testReportData project(':ecs-sync-core')
    testReportData project(':ecs-sync-ctl')
    testReportData project(':ecs-sync-model')
    file('storage-plugins').eachDir {
        testReportData project(":storage-plugins:${it.name}")
    }
    file('filter-plugins').eachDir {
        testReportData project(":filter-plugins:${it.name}")
    }
}

// use the "testReport" task to generate an aggregated JUnit report
tasks.register('testReport', TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Use test results from testReportData configuration
    testResultDirs.from(configurations.testReportData)
}

import com.github.jk1.license.render.*

licenseReport {
    renderers = [new InventoryHtmlReportRenderer(), new CsvReportRenderer()]
}
generateLicenseReport.dependsOn subprojects.collect { it.tasks.withType(JavaCompile) }

distributions {
    main {
        contents {
            from 'readme.txt'
            from 'license.txt'
            from 'license'
            into('3rd-party-licenses') {
                from generateLicenseReport
            }
            from { project(':ecs-sync-cli').shadowJar }
            from { project(':ecs-sync-ctl').shadowJar }
            from 'script'
            into('samples') {
                from 'sample'
            }
            /*
            into('docker') {
                from 'docker'
            }
            */
        }
    }
}
