<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- This sample Spring configuration file that encrypts Atmos objects in-place. -->

	<!-- This is the required 'root' bean that will bootstrap the operation -->
	<bean name="sync" class="com.emc.vipr.sync.ViPRSync">
		<property name="source" ref="source" />
		<property name="target" ref="target" />
		<property name="filters">
			<list>
                <!-- the tracking filter is useful to do repeat runs and resume where you left off -->
                <!--ref bean="trackingFilter" /-->
                <ref bean="localCacheFilter" />
                <ref bean="encryptionFilter" />
			</list>
		</property>

        <!-- processing configuration -->
        <property name="syncThreadCount" value="8" />
        <property name="rememberFailed" value="false" />
        <property name="logLevel" value="verbose"/>
	</bean>

	<!-- The source plugin -->
	<bean name="source" class="com.emc.vipr.sync.source.AtmosSource">
		<property name="endpoints">
			<list>
				<value>http://10.6.143.97</value>
                <value>http://10.6.143.98</value>
                <value>http://10.6.143.99</value>
                <value>http://10.6.143.100</value>
			</list>
		</property>
		<property name="uid" value="ace7d3da351242bcb095eb841ad50371/test" />
		<property name="secret" value="HkayrXoEYUQ3VCMCaaViS0t5pDs=" />
		<property name="namespaceRoot" value="/encrypt-test/" />
	</bean>

    <!-- The target -->
    <bean name="target" class="com.emc.vipr.sync.target.AtmosTarget">
        <property name="endpoints">
            <list>
                <value>http://10.6.143.97</value>
                <value>http://10.6.143.98</value>
                <value>http://10.6.143.99</value>
                <value>http://10.6.143.100</value>
            </list>
        </property>
        <property name="uid" value="ace7d3da351242bcb095eb841ad50371/test" />
        <property name="secret" value="HkayrXoEYUQ3VCMCaaViS0t5pDs=" />
        <property name="destNamespace" value="/encrypt-test/" />
    </bean>

    <!-- The Tracking plugin -->
    <bean name="trackingFilter" class="com.emc.vipr.sync.filter.TrackingFilter">
        <property name="dataSource" ref="dataSource"/>
        <!-- this will create the table in the DB if it doesn't already exist -->
        <property name="createTable" value="true"/>
        <!-- specifies the name of the table that will track migration progress -->
        <property name="tableName" value="encrypt_status"/>
        <!-- specify additional metadata values to store for each object in the tracking table
             (can add Atmos system metadata too) -->
        <!--<property name="metaTags"><list>
            <value>size</value>
            <value>mtime</value>
        </list></property>-->
    </bean>

    <!-- The local cache plugin.. necessary so we can encrypt-in-place -->
    <bean name="localCacheFilter" class="com.emc.vipr.sync.filter.LocalCacheFilter">
        <property name="cacheRoot" value="/tmp/vs-cache"/>
    </bean>

    <!-- The encryption plugin -->
    <bean name="encryptionFilter" class="com.emc.vipr.sync.filter.EncryptionFilter">
        <property name="keystoreFile" value="store.jks"/>
        <property name="keystorePass" value="CHANGE_ME"/>
        <property name="keyAlias" value="KEY_ALIAS"/>
        <property name="forceStrong" value="true"/>

        <!-- necessary for in-place encryption (otherwise target will assume object has not changed and ignore it) -->
        <property name="updateMtime" value="true"/>
    </bean>

    <!-- Here we show using a custom DataSource through Spring -->
	<bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="url" value="jdbc:mysql://localhost:3306/vipr_sync"/>
		<property name="maxActive" value="200"/>
        <property name="maxOpenPreparedStatements" value="200"/>
	</bean>
</beans>
