apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.slf4j:slf4j-api:1.7.12",
            "org.slf4j:slf4j-log4j12:1.7.12",
            "org.springframework:spring-beans:3.2.17.RELEASE",
            "org.springframework:spring-context:3.2.17.RELEASE",
            "commons-cli:commons-cli:1.3.1",
            "javax.ws.rs:jsr311-api:1.1.1"
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    if (project.hasProperty('java8Lib')) {
        options.fork = true
        options.bootClasspath = new File(java8Lib).listFiles(
                [accept:{d, f-> f ==~ /.*\.jar/ }] as FilenameFilter
        ).join(File.pathSeparator)
    }
}

javadoc {
    if (JavaVersion.current() >= JavaVersion.VERSION_1_8) options.addStringOption('Xdoclint:none', '-quiet')
    else options.quiet()
}

task jaxbFiles(type: Exec) {
    workingDir project.projectDir
    commandLine 'grep', '-lR', 'XmlRootElement', 'src/main/java'
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

task schemagen(type: Exec, dependsOn: [jaxbFiles, compileJava]) {
    doFirst {
        def argList = ['-d', "${sourceSets.main.output.classesDir}",
                '-cp', "${configurations.compile.asPath}${File.pathSeparatorChar}${sourceSets.main.output.classesDir}${File.pathSeparatorChar}src/main/java"]
        argList.addAll(jaxbFiles.output().split('\n'))
        args(argList as String[])
    }
    workingDir project.projectDir
    executable 'schemagen'
    ignoreExitValue true
    doLast {
        file("${sourceSets.main.output.classesDir}/schema1.xsd").renameTo(file("${rootProject.projectDir}/sample/model.xsd"))
    }
}
